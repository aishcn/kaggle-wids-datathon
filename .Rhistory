#Sys.setenv(LANG = "en")
library(tidyverse)
library(ggplot2)
library(GGally)
library(DataExplorer)
library(olsrr)
library(gridExtra)
library(cluster)
library(factoextra)
library(caretEnsemble)
library(caret)
library(mlbench)
library(Metrics)
library(Boruta)
library(tidymodels)   # packages for modeling and statistical analysis
library(tune)         # For hyperparemeter tuning
library(workflows)    # streamline process
library(tictoc)
library(quantregForest)
library(e1071)
library(solitude)
library(RColorBrewer)
# Loading the data
dt = read_csv('train.csv')
# Converting gridcode to a factor
#dt$gridcode = as.factor(dt$gridcode)
head(dt)
length(unique(dt$gridcode)) # 23
# Loading the data
dt = read_csv('train.csv')
# Converting some columns to a factor
dt$Year_Factor = as.factor(dt$Year_Factor)
dt$State_Factor = as.factor(dt$State_Factor)
dt$building_class = as.factor(dt$building_class)
dt = dt.drop(c('id'))
# Loading the data
dt = read_csv('train.csv')
# Converting some columns to a factor
dt$Year_Factor = as.factor(dt$Year_Factor)
dt$State_Factor = as.factor(dt$State_Factor)
dt$building_class = as.factor(dt$building_class)
dt = dt |> select(-c('id'))
head(dt)
# Generating summary statistics for dt
summary(dt)
# EDA
plot_intro(dt)
plot_missing(dt)
plot_bar(dt)
plot_histogram(dt)
plot_density(dt)
plot_qq(dt)
plot_qq(dt, by = "Year_Factor")
plot_qq(dt, by = "State_Factor")
# Loading the data
dt = read_csv('train.csv')
# Converting some columns to a factor
dt$Year_Factor = as.factor(dt$Year_Factor)
dt$State_Factor = as.factor(dt$State_Factor)
dt$building_class = as.factor(dt$building_class)
dt = dt |> select(-c('id'))
dt = dt |> distinct()
head(dt)
# Loading the data
dt = read_csv('train.csv')
# Converting some columns to a factor
dt$Year_Factor = as.factor(dt$Year_Factor)
dt$State_Factor = as.factor(dt$State_Factor)
dt$building_class = as.factor(dt$building_class)
dt = dt |> select(-c('id'))
dt.nrow()
# Loading the data
dt = read_csv('train.csv')
# Converting some columns to a factor
dt$Year_Factor = as.factor(dt$Year_Factor)
dt$State_Factor = as.factor(dt$State_Factor)
dt$building_class = as.factor(dt$building_class)
dt = dt |> select(-c('id'))
nrow(dt)
dt = dt |> distinct()
nrow(dt)
head(dt)
# Generating summary statistics for dt
summary(dt)
# EDA
plot_intro(dt)
plot_missing(dt)
plot_bar(dt)
plot_histogram(dt)
plot_density(dt)
# plot_qq(dt)
# plot_qq(dt, by = "Year_Factor")
# plot_qq(dt, by = "State_Factor")
# plot_qq(dt, by = "building_class")
plot_correlation(dt)
# plot_boxplot(dt, by = "Year_Factor")
# plot_boxplot(dt, by = "State_Factor")
# plot_boxplot(dt, by = "building_class")
plot_scatterplot(split_columns(dt)$continuous, by = "site_eui")
plot_prcomp(na.omit(dt), maxcat = 4L)
# Checking dimensions of dt
nrow(dt) #
ncol(dt) #
percent_missing = dt.isna().sum() * 100 / length(dt)
percent_missing = sum(isna(dt)) * 100 / length(dt)
percent_missing = sum(is.na(dt)) * 100 / length(dt)
missing_value_df = data.frame({'column_name': colname(dt),
percent_missing = sum(is.na(dt)) * 100 / length(dt)
missing_value_df = data.frame('column_name': colname(dt),
'percent_missing': percent_missing)
percent_missing = sum(is.na(dt)) * 100 / length(dt)
missing_value_df = data.frame('column_name': colnames(dt),
'percent_missing': percent_missing)
percent_missing = sum(is.na(dt)) * 100 / length(dt)
missing_value_df = data.frame('column_name'= colnames(dt),
'percent_missing'= percent_missing)
missing_value_df[missing_value_df.percent_missing != 0.0]
percent_missing = sum(is.na(dt)) * 100 / length(dt)
missing_value_df = data.frame('column_name'= colnames(dt),
'percent_missing'= percent_missing)
missing_value_df[missing_value_df$percent_missing != 0.0]
percent_missing = sum(is.na(dt)) * 100 / length(dt)
missing_value_df = data.frame('column_name'= colnames(dt),
'percent_missing'= percent_missing)
missing_value_df |> filter(percent_missing != 0.0)
percent_missing = sum(is.na(dt)) * 100 / nrows(dt)
percent_missing = sum(is.na(dt)) * 100 / nrow(dt)
missing_value_df = data.frame('column_name'= colnames(dt),
'percent_missing'= percent_missing)
missing_value_df |> filter(percent_missing != 0.0)
colMeans(is.na(x))
colMeans(is.na(dt))
dt %>% summarize_all(funs(sum(is.na(.)) / length(.)))
mean(complete.cases(dt))
colMeans(is.na.data.frame(dt))
colMeans(is.na.data.frame(dt)) != 0
missing_df = colMeans(is.na.data.frame(dt))
missing_df |> filter(missing_df != 0)
dt %>% map(~ mean(is.na(.)))
sapply(data, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
rownames(my.list) <- col
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
rownames(missing) <- col
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
colnames(missing)
#missing |> filter()
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing != 0
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing.filter(missing != 0)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
filter(missing != 0)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
filter(missing, missing != 0)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing[missing != 0 ]
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing[missing != 0]
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing = cbind(missing, rownames(missing))
missing
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
missing_df.orderby(missing)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
orderby(missing, missing_df)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
orderBy(missing, missing_df)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
sort(missing, missing_df)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
sort(missing_df)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
missing_df
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = data.frame(missing, rownames(missing))
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
order(missing_df, decreasing = TRUE)
missing = sapply(dt, function(y) round((sum(length(which(is.na(y))))/nrow(dt))*100.00,2))
missing_df = cbind(missing, rownames(missing))
missing_df
na_count <- sort(colSums(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count
na_count <- sort(colSums(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[2:3]
na_count <- sort(colSums(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[,2:3]
na_count <- sort(colSums(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[,2:4]
na_count <- sort(colSums(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[,3:4]
na_count <- sort(colSums(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[,1:2]
na_count <- sort(colMeans(is.na(dt)))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[,1:2]
na_count <- sort(colMeans(is.na(dt))*100)
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[,1:2]
na_count <- sort(colMeans(is.na(dt))*100)
na_count <- data.frame(names=names(na_count), count=na_count)
sort(na_count$count)
na_count <- sort(colMeans(is.na(dt))*100)
na_count <- data.frame(names=names(na_count), count=na_count)
na_count(order(na_count$count,))
na_count <- sort(colMeans(is.na(dt))*100)
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[order(na_count$count,)]
na_count <- sort(colMeans(is.na(dt))*100)
na_count <- data.frame(names=names(na_count), count=na_count)
na_count[order(na_count$count)]
na_count <- sort(colMeans(is.na(dt))*100, descreasing = TRUE)
na_count <- sort(colMeans(is.na(dt))*100, decreasing = TRUE)
na_count <- data.frame(names=names(na_count), count=na_count)
na_count
na_count <- sort(colMeans(is.na(dt))*100, decreasing = TRUE).head()
na_count <- head(sort(colMeans(is.na(dt))*100, decreasing = TRUE)0
na_count <- head(sort(colMeans(is.na(dt))*100, decreasing = TRUE))
na_count <- data.frame(names=names(na_count), count=na_count)
na_count
na_count <- head(sort(colMeans(is.na(dt))*100, decreasing = TRUE))
na_count <- data.frame(count=na_count)
na_count
col_high_missing = c('direction_max_wind_speed', 'direction_peak_wind_speed', 'max_wind_speed', 'days_with_fog')
dt = dt |> select(-col_high_missing)
